{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "530390aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import os\n",
    "from thermal_lib import *\n",
    "from tqdm import tqdm\n",
    "import pingouin as pg\n",
    "import matplotlib.patches as mpatches\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "\n",
    "def plot_avg(var, isDay, draw_sub=True, draw_sem = True, draw_zero = False, ax=None, color='b'):\n",
    "\n",
    "    if ax is None:\n",
    "        fig, ax = plt.subplots(figsize=(6,4))\n",
    "\n",
    "    if draw_zero:\n",
    "        ax.axhline(0,color='k',linestyle='--')\n",
    "\n",
    "    if draw_sub:\n",
    "        for c in var.columns:\n",
    "            ax.plot(var.index, var[c],color,alpha=.1)\n",
    "\n",
    "    avg = var.mean(axis=1) \n",
    "\n",
    "    if draw_sem:\n",
    "        sem = var.sem(axis=1) \n",
    "        ax.fill_between(var.index, avg+sem, avg-sem, alpha=.3, color=color,edgecolor='none')\n",
    "\n",
    "    ax.plot(var.index, avg,color,alpha=1)\n",
    "    xlims = [var.index[0], var.index[-1]]\n",
    "    ax.set_xlim(xlims)\n",
    "    ylims = ax.get_ylim()\n",
    "    ax.fill_between(var.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "    ax.set_ylim(ylims)\n",
    "    #ax.set_xlabel('Time [Hours]')\n",
    "    \n",
    "def plot_raw(data=None, y=None, x=None, isDay=None, ax=None, hzero=True):\n",
    "    \n",
    "    if ax is None:\n",
    "        fig,ax = plt.subplots(figsize=(8,3))\n",
    "\n",
    "    if x is None:\n",
    "        x = data.index\n",
    "    \n",
    "    if hzero:\n",
    "        ax.axhline(0,color='k',linestyle='--')\n",
    "    \n",
    "    ax.plot(x, data[y] )\n",
    "    ax.set_ylim([data[y].min()*1.1, data[y].max()*1.1 ])\n",
    "    ylims = ax.get_ylim()\n",
    "    ax.fill_between(x, where=data['isDay']==0, \n",
    "                    y1=ylims[0], \n",
    "                    y2=ylims[1], \n",
    "                    color='gray', alpha=.2, edgecolor='None' )\n",
    "\n",
    "    ax.set_xlim([x[0], x[-1]])\n",
    "    return ax\n",
    "\n",
    "def actogram(in_each_day, ax=None, baseline=True,linecolor='tab:blue',isDay=None):\n",
    "    each_day = in_each_day.copy()\n",
    "\n",
    "    each_day = each_day/each_day.abs().max().max()\n",
    "    spacing = 1.5\n",
    "    \n",
    "    mot_day_tick = list()\n",
    "    mot_day_tick_lbl = list()\n",
    "    all_days = len(each_day.columns)\n",
    "    for i,c in enumerate(each_day.columns):    \n",
    "        each_day[c] = each_day[c] + spacing*(all_days-i)\n",
    "        mot_day_tick.append(spacing*(all_days-i))\n",
    "        mot_day_tick_lbl.append(i)\n",
    "    \n",
    "    if ax is None:\n",
    "        fig,ax = plt.subplots(figsize=(4,5))\n",
    "        ax.set_ylabel('Day')\n",
    "        ax.set_xlabel('Hour')\n",
    "    if baseline:\n",
    "        for b in mot_day_tick:\n",
    "            ax.axhline(b,color='k',linestyle='--')\n",
    "    ax.plot(each_day.index,each_day,linecolor)\n",
    "    if isDay is not None:\n",
    "        ylims = ax.get_ylim()\n",
    "        ax.fill_between(isDay.index,y1=ylims[0],y2=ylims[1],where=isDay<1,color='gray',edgecolor='None',alpha=.4)\n",
    "        \n",
    "    ax.set_yticks(mot_day_tick)\n",
    "    #ax.set_yticklabels(mot_day_tick_lbl)\n",
    "    \n",
    "    ax.set_xlim(each_day.index[0],each_day.index[-1])\n",
    "    \n",
    "    if isDay is None:\n",
    "        ylims = ax.get_ylim()\n",
    "    ax.set_ylim(ylims)\n",
    "    \n",
    "\n",
    "\n",
    "def swarmbox(data,x,y,ax=None,palette=None,order=None):\n",
    "    PROPS = {'boxprops':{'facecolor':'none'}}\n",
    "    sns.swarmplot(data=data,x=x,y=y,palette=palette,ax=ax,alpha=.3,order=order)\n",
    "    sns.boxplot(data=data,x=x,y=y,palette=palette,ax=ax,order=order,width=0.3,fliersize=0, **PROPS)\n",
    "\n",
    "    box_patches = [patch for patch in ax.patches if type(patch) == matplotlib.patches.PathPatch]\n",
    "    if len(box_patches) == 0:  \n",
    "        box_patches = ax.artists\n",
    "    num_patches = len(box_patches)\n",
    "    lines_per_boxplot = len(ax.lines) // num_patches\n",
    "    if type(palette)==dict:\n",
    "        palette=[i[1] for i in list(palette.items()) ]\n",
    "    for i, patch in enumerate(box_patches):\n",
    "        if i==0:\n",
    "            col=palette[0]\n",
    "        else:\n",
    "            col=palette[1]\n",
    "        patch.set_edgecolor(col)\n",
    "        for line in ax.lines[i * lines_per_boxplot: (i + 1) * lines_per_boxplot]:\n",
    "            line.set_color(col)\n",
    "    \n",
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b6ef7a3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "pth = r'D:\\thermography\\cdkl5_thermal_behaviour_group1\\unico'\n",
    "pth = None\n",
    "sub = Subjects(pth)\n",
    "print(sub)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "12b37d38",
   "metadata": {},
   "outputs": [],
   "source": [
    "isDay = list()\n",
    "temperature = dict()\n",
    "motion = dict()\n",
    "for info,rec in tqdm( sub.iter_data() , total=len(sub) ):\n",
    "    #rec = rec.sort_values(by='minute').reset_index(drop=True)\n",
    "    motion[(info['geno'], info['id'])] = rec['distance']\n",
    "    temperature[(info['geno'], info['id'])] = rec['temp_rt_diff']\n",
    "    isDay.append(rec['isDay'])\n",
    "\n",
    "isDay = pd.concat(isDay,axis=1).mean(axis=1)\n",
    "motion = pd.DataFrame.from_dict(motion)\n",
    "temperature = pd.DataFrame.from_dict(temperature,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6bc47e31",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig,ax = plt.subplots(2,1,sharex=True, figsize=(7,4)) \n",
    "plot_avg( temperature.xs('KO',level=0,axis=1), isDay,color='m',ax=ax[0])\n",
    "plot_avg( temperature.xs('WT',level=0,axis=1), isDay,color='c',ax=ax[0])\n",
    "ax[0].set_ylabel('Temperature from RT \\n[Degree]')\n",
    "ax2 = ax[0].secondary_xaxis(\"top\", functions=(lambda x: x/60, lambda x: x*60))\n",
    "ax2.set_xlabel('Hour')\n",
    "\n",
    "plot_avg( motion.xs('KO',level=0,axis=1), isDay,color='m', ax=ax[1])\n",
    "plot_avg( motion.xs('WT',level=0,axis=1), isDay,color='c', ax=ax[1])\n",
    "ax[1].set_ylabel('Distance \\n[pixel]')\n",
    "ax[1].set_xlabel('Minute')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7df18c39",
   "metadata": {},
   "outputs": [],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c2ad13a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_wt = temperature.xs('WT',level=0,axis=1)\n",
    "import numpy as np\n",
    "from scipy import signal\n",
    "from scipy.fft import fftshift\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b151253b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = temp_wt.iloc[:,1]\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.014))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "36dae72d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = temp_wt.iloc[:,1]\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.014))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "aca6a422",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "x = temp_wt.iloc[:,1]\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.02))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "54444724",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "x = temp_wt.iloc[:,1]\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.01.5))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fc1d19ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "x = temp_wt.iloc[:,1]\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.015))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62876629",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "x = temp_wt.iloc[:,6]\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.015))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1e0b3064",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook inline\n",
    "x = temp_wt.iloc[:,10]\n",
    "fs = 60\n",
    "f, t, Sxx = signal.spectrogram(x, fs,nperseg=int(720),noverlap=700,nfft=10000)\n",
    "time_x = np.linspace(t[0],t[-1],len(x))\n",
    "x.index = time_x\n",
    "\n",
    "fig,ax = plt.subplots(2,1,sharex=True)\n",
    "\n",
    "ax[0].plot(x)\n",
    "ylims = ax[0].get_ylim()\n",
    "ax[0].fill_between(x.index, y1=ylims[0], y2=ylims[1], where=isDay<1,alpha=.2, color='gray',edgecolor='none')\n",
    "foi = np.where((f<1)&(f>0.015))[0]\n",
    "ax[1].pcolormesh(t, np.nan_to_num(1/f[foi],posinf=0), Sxx[foi,:], shading='gouraud',cmap='jet')\n",
    "ax[1].set_ylabel('Frequency [Hz]')\n",
    "ax[1].set_xlabel('Time [sec]')"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
